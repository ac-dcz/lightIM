// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: online.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Online_UserOnline_FullMethodName  = "/types.Online/UserOnline"
	Online_UserOffline_FullMethodName = "/types.Online/UserOffline"
	Online_GetRoute_FullMethodName    = "/types.Online/GetRoute"
)

// OnlineClient is the client API for Online service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnlineClient interface {
	UserOnline(ctx context.Context, in *UserOfflineReq, opts ...grpc.CallOption) (*UserOfflineResp, error)
	UserOffline(ctx context.Context, in *UserOfflineReq, opts ...grpc.CallOption) (*UserOfflineResp, error)
	GetRoute(ctx context.Context, in *RouteReq, opts ...grpc.CallOption) (*RouteResp, error)
}

type onlineClient struct {
	cc grpc.ClientConnInterface
}

func NewOnlineClient(cc grpc.ClientConnInterface) OnlineClient {
	return &onlineClient{cc}
}

func (c *onlineClient) UserOnline(ctx context.Context, in *UserOfflineReq, opts ...grpc.CallOption) (*UserOfflineResp, error) {
	out := new(UserOfflineResp)
	err := c.cc.Invoke(ctx, Online_UserOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineClient) UserOffline(ctx context.Context, in *UserOfflineReq, opts ...grpc.CallOption) (*UserOfflineResp, error) {
	out := new(UserOfflineResp)
	err := c.cc.Invoke(ctx, Online_UserOffline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineClient) GetRoute(ctx context.Context, in *RouteReq, opts ...grpc.CallOption) (*RouteResp, error) {
	out := new(RouteResp)
	err := c.cc.Invoke(ctx, Online_GetRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnlineServer is the server API for Online service.
// All implementations must embed UnimplementedOnlineServer
// for forward compatibility
type OnlineServer interface {
	UserOnline(context.Context, *UserOfflineReq) (*UserOfflineResp, error)
	UserOffline(context.Context, *UserOfflineReq) (*UserOfflineResp, error)
	GetRoute(context.Context, *RouteReq) (*RouteResp, error)
	mustEmbedUnimplementedOnlineServer()
}

// UnimplementedOnlineServer must be embedded to have forward compatible implementations.
type UnimplementedOnlineServer struct {
}

func (UnimplementedOnlineServer) UserOnline(context.Context, *UserOfflineReq) (*UserOfflineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOnline not implemented")
}
func (UnimplementedOnlineServer) UserOffline(context.Context, *UserOfflineReq) (*UserOfflineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOffline not implemented")
}
func (UnimplementedOnlineServer) GetRoute(context.Context, *RouteReq) (*RouteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedOnlineServer) mustEmbedUnimplementedOnlineServer() {}

// UnsafeOnlineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnlineServer will
// result in compilation errors.
type UnsafeOnlineServer interface {
	mustEmbedUnimplementedOnlineServer()
}

func RegisterOnlineServer(s grpc.ServiceRegistrar, srv OnlineServer) {
	s.RegisterService(&Online_ServiceDesc, srv)
}

func _Online_UserOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServer).UserOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Online_UserOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServer).UserOnline(ctx, req.(*UserOfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Online_UserOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServer).UserOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Online_UserOffline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServer).UserOffline(ctx, req.(*UserOfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Online_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Online_GetRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServer).GetRoute(ctx, req.(*RouteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Online_ServiceDesc is the grpc.ServiceDesc for Online service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Online_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.Online",
	HandlerType: (*OnlineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserOnline",
			Handler:    _Online_UserOnline_Handler,
		},
		{
			MethodName: "UserOffline",
			Handler:    _Online_UserOffline_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _Online_GetRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "online.proto",
}
