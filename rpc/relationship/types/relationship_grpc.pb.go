// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: relationship.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelationShip_AddFriend_FullMethodName       = "/relationship.RelationShip/AddFriend"
	RelationShip_FriendAck_FullMethodName       = "/relationship.RelationShip/FriendAck"
	RelationShip_DelFriend_FullMethodName       = "/relationship.RelationShip/DelFriend"
	RelationShip_FriendList_FullMethodName      = "/relationship.RelationShip/FriendList"
	RelationShip_CreateGroup_FullMethodName     = "/relationship.RelationShip/CreateGroup"
	RelationShip_JoinGroup_FullMethodName       = "/relationship.RelationShip/JoinGroup"
	RelationShip_GroupAck_FullMethodName        = "/relationship.RelationShip/GroupAck"
	RelationShip_LeaveGroup_FullMethodName      = "/relationship.RelationShip/LeaveGroup"
	RelationShip_GroupMemberList_FullMethodName = "/relationship.RelationShip/GroupMemberList"
)

// RelationShipClient is the client API for RelationShip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationShipClient interface {
	AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*AddFriendResp, error)
	FriendAck(ctx context.Context, in *AddFriendAck, opts ...grpc.CallOption) (*AddFriendAckResp, error)
	DelFriend(ctx context.Context, in *DelFriendReq, opts ...grpc.CallOption) (*DelFriendResp, error)
	FriendList(ctx context.Context, in *FriendListReq, opts ...grpc.CallOption) (*FriendListResp, error)
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error)
	GroupAck(ctx context.Context, in *JoinGroupAck, opts ...grpc.CallOption) (*JoinGroupAckResp, error)
	LeaveGroup(ctx context.Context, in *LeaveGroupReq, opts ...grpc.CallOption) (*LeaveGroupReq, error)
	GroupMemberList(ctx context.Context, in *GroupMemberListReq, opts ...grpc.CallOption) (*GroupMemberListResp, error)
}

type relationShipClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationShipClient(cc grpc.ClientConnInterface) RelationShipClient {
	return &relationShipClient{cc}
}

func (c *relationShipClient) AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*AddFriendResp, error) {
	out := new(AddFriendResp)
	err := c.cc.Invoke(ctx, RelationShip_AddFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) FriendAck(ctx context.Context, in *AddFriendAck, opts ...grpc.CallOption) (*AddFriendAckResp, error) {
	out := new(AddFriendAckResp)
	err := c.cc.Invoke(ctx, RelationShip_FriendAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) DelFriend(ctx context.Context, in *DelFriendReq, opts ...grpc.CallOption) (*DelFriendResp, error) {
	out := new(DelFriendResp)
	err := c.cc.Invoke(ctx, RelationShip_DelFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) FriendList(ctx context.Context, in *FriendListReq, opts ...grpc.CallOption) (*FriendListResp, error) {
	out := new(FriendListResp)
	err := c.cc.Invoke(ctx, RelationShip_FriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, RelationShip_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error) {
	out := new(JoinGroupResp)
	err := c.cc.Invoke(ctx, RelationShip_JoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) GroupAck(ctx context.Context, in *JoinGroupAck, opts ...grpc.CallOption) (*JoinGroupAckResp, error) {
	out := new(JoinGroupAckResp)
	err := c.cc.Invoke(ctx, RelationShip_GroupAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) LeaveGroup(ctx context.Context, in *LeaveGroupReq, opts ...grpc.CallOption) (*LeaveGroupReq, error) {
	out := new(LeaveGroupReq)
	err := c.cc.Invoke(ctx, RelationShip_LeaveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) GroupMemberList(ctx context.Context, in *GroupMemberListReq, opts ...grpc.CallOption) (*GroupMemberListResp, error) {
	out := new(GroupMemberListResp)
	err := c.cc.Invoke(ctx, RelationShip_GroupMemberList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationShipServer is the server API for RelationShip service.
// All implementations must embed UnimplementedRelationShipServer
// for forward compatibility
type RelationShipServer interface {
	AddFriend(context.Context, *AddFriendReq) (*AddFriendResp, error)
	FriendAck(context.Context, *AddFriendAck) (*AddFriendAckResp, error)
	DelFriend(context.Context, *DelFriendReq) (*DelFriendResp, error)
	FriendList(context.Context, *FriendListReq) (*FriendListResp, error)
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	JoinGroup(context.Context, *JoinGroupReq) (*JoinGroupResp, error)
	GroupAck(context.Context, *JoinGroupAck) (*JoinGroupAckResp, error)
	LeaveGroup(context.Context, *LeaveGroupReq) (*LeaveGroupReq, error)
	GroupMemberList(context.Context, *GroupMemberListReq) (*GroupMemberListResp, error)
	mustEmbedUnimplementedRelationShipServer()
}

// UnimplementedRelationShipServer must be embedded to have forward compatible implementations.
type UnimplementedRelationShipServer struct {
}

func (UnimplementedRelationShipServer) AddFriend(context.Context, *AddFriendReq) (*AddFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedRelationShipServer) FriendAck(context.Context, *AddFriendAck) (*AddFriendAckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendAck not implemented")
}
func (UnimplementedRelationShipServer) DelFriend(context.Context, *DelFriendReq) (*DelFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFriend not implemented")
}
func (UnimplementedRelationShipServer) FriendList(context.Context, *FriendListReq) (*FriendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendList not implemented")
}
func (UnimplementedRelationShipServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedRelationShipServer) JoinGroup(context.Context, *JoinGroupReq) (*JoinGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedRelationShipServer) GroupAck(context.Context, *JoinGroupAck) (*JoinGroupAckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAck not implemented")
}
func (UnimplementedRelationShipServer) LeaveGroup(context.Context, *LeaveGroupReq) (*LeaveGroupReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedRelationShipServer) GroupMemberList(context.Context, *GroupMemberListReq) (*GroupMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMemberList not implemented")
}
func (UnimplementedRelationShipServer) mustEmbedUnimplementedRelationShipServer() {}

// UnsafeRelationShipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationShipServer will
// result in compilation errors.
type UnsafeRelationShipServer interface {
	mustEmbedUnimplementedRelationShipServer()
}

func RegisterRelationShipServer(s grpc.ServiceRegistrar, srv RelationShipServer) {
	s.RegisterService(&RelationShip_ServiceDesc, srv)
}

func _RelationShip_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_AddFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).AddFriend(ctx, req.(*AddFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_FriendAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).FriendAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_FriendAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).FriendAck(ctx, req.(*AddFriendAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_DelFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).DelFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_DelFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).DelFriend(ctx, req.(*DelFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_FriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).FriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_FriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).FriendList(ctx, req.(*FriendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).JoinGroup(ctx, req.(*JoinGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_GroupAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).GroupAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_GroupAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).GroupAck(ctx, req.(*JoinGroupAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).LeaveGroup(ctx, req.(*LeaveGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_GroupMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).GroupMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_GroupMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).GroupMemberList(ctx, req.(*GroupMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationShip_ServiceDesc is the grpc.ServiceDesc for RelationShip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationShip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relationship.RelationShip",
	HandlerType: (*RelationShipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFriend",
			Handler:    _RelationShip_AddFriend_Handler,
		},
		{
			MethodName: "FriendAck",
			Handler:    _RelationShip_FriendAck_Handler,
		},
		{
			MethodName: "DelFriend",
			Handler:    _RelationShip_DelFriend_Handler,
		},
		{
			MethodName: "FriendList",
			Handler:    _RelationShip_FriendList_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _RelationShip_CreateGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _RelationShip_JoinGroup_Handler,
		},
		{
			MethodName: "GroupAck",
			Handler:    _RelationShip_GroupAck_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _RelationShip_LeaveGroup_Handler,
		},
		{
			MethodName: "GroupMemberList",
			Handler:    _RelationShip_GroupMemberList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relationship.proto",
}
