// Code generated by goctl. DO NOT EDIT.
// Source: relationship.proto

package relationship

import (
	"context"

	"lightIM/rpc/relationship/types"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddFriendAck        = types.AddFriendAck
	AddFriendAckResp    = types.AddFriendAckResp
	AddFriendReq        = types.AddFriendReq
	AddFriendResp       = types.AddFriendResp
	Base                = types.Base
	CreateGroupReq      = types.CreateGroupReq
	CreateGroupResp     = types.CreateGroupResp
	DelFriendReq        = types.DelFriendReq
	DelFriendResp       = types.DelFriendResp
	FriendListReq       = types.FriendListReq
	FriendListResp      = types.FriendListResp
	GroupMemberListReq  = types.GroupMemberListReq
	GroupMemberListResp = types.GroupMemberListResp
	JoinGroupAck        = types.JoinGroupAck
	JoinGroupAckResp    = types.JoinGroupAckResp
	JoinGroupReq        = types.JoinGroupReq
	JoinGroupResp       = types.JoinGroupResp
	LeaveGroupReq       = types.LeaveGroupReq
	LeaveGroupResp      = types.LeaveGroupResp

	RelationShip interface {
		AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*AddFriendResp, error)
		FriendAck(ctx context.Context, in *AddFriendAck, opts ...grpc.CallOption) (*AddFriendAckResp, error)
		DelFriend(ctx context.Context, in *DelFriendReq, opts ...grpc.CallOption) (*DelFriendResp, error)
		FriendList(ctx context.Context, in *FriendListReq, opts ...grpc.CallOption) (*FriendListResp, error)
		JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error)
		GroupAck(ctx context.Context, in *JoinGroupAck, opts ...grpc.CallOption) (*JoinGroupAckResp, error)
		LeaveGroup(ctx context.Context, in *LeaveGroupReq, opts ...grpc.CallOption) (*LeaveGroupReq, error)
		GroupMemberList(ctx context.Context, in *GroupMemberListReq, opts ...grpc.CallOption) (*GroupMemberListResp, error)
	}

	defaultRelationShip struct {
		cli zrpc.Client
	}
)

func NewRelationShip(cli zrpc.Client) RelationShip {
	return &defaultRelationShip{
		cli: cli,
	}
}

func (m *defaultRelationShip) AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*AddFriendResp, error) {
	client := types.NewRelationShipClient(m.cli.Conn())
	return client.AddFriend(ctx, in, opts...)
}

func (m *defaultRelationShip) FriendAck(ctx context.Context, in *AddFriendAck, opts ...grpc.CallOption) (*AddFriendAckResp, error) {
	client := types.NewRelationShipClient(m.cli.Conn())
	return client.FriendAck(ctx, in, opts...)
}

func (m *defaultRelationShip) DelFriend(ctx context.Context, in *DelFriendReq, opts ...grpc.CallOption) (*DelFriendResp, error) {
	client := types.NewRelationShipClient(m.cli.Conn())
	return client.DelFriend(ctx, in, opts...)
}

func (m *defaultRelationShip) FriendList(ctx context.Context, in *FriendListReq, opts ...grpc.CallOption) (*FriendListResp, error) {
	client := types.NewRelationShipClient(m.cli.Conn())
	return client.FriendList(ctx, in, opts...)
}

func (m *defaultRelationShip) JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error) {
	client := types.NewRelationShipClient(m.cli.Conn())
	return client.JoinGroup(ctx, in, opts...)
}

func (m *defaultRelationShip) GroupAck(ctx context.Context, in *JoinGroupAck, opts ...grpc.CallOption) (*JoinGroupAckResp, error) {
	client := types.NewRelationShipClient(m.cli.Conn())
	return client.GroupAck(ctx, in, opts...)
}

func (m *defaultRelationShip) LeaveGroup(ctx context.Context, in *LeaveGroupReq, opts ...grpc.CallOption) (*LeaveGroupReq, error) {
	client := types.NewRelationShipClient(m.cli.Conn())
	return client.LeaveGroup(ctx, in, opts...)
}

func (m *defaultRelationShip) GroupMemberList(ctx context.Context, in *GroupMemberListReq, opts ...grpc.CallOption) (*GroupMemberListResp, error) {
	client := types.NewRelationShipClient(m.cli.Conn())
	return client.GroupMemberList(ctx, in, opts...)
}
