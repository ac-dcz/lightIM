// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: message.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Message_CreateNew_FullMethodName       = "/message.Message/CreateNew"
	Message_GetHistory_FullMethodName      = "/message.Message/GetHistory"
	Message_GetGroupHistory_FullMethodName = "/message.Message/GetGroupHistory"
	Message_GetUnRead_FullMethodName       = "/message.Message/GetUnRead"
	Message_GetMessage_FullMethodName      = "/message.Message/GetMessage"
	Message_UpdateMsgStatus_FullMethodName = "/message.Message/UpdateMsgStatus"
	Message_AckMsg_FullMethodName          = "/message.Message/AckMsg"
)

// MessageClient is the client API for Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageClient interface {
	CreateNew(ctx context.Context, in *CreateNewReq, opts ...grpc.CallOption) (*CreateNewResp, error)
	GetHistory(ctx context.Context, in *HistoryReq, opts ...grpc.CallOption) (*HistoryResp, error)
	GetGroupHistory(ctx context.Context, in *GroupHistoryReq, opts ...grpc.CallOption) (*GroupHistoryResp, error)
	GetUnRead(ctx context.Context, in *UnReadReq, opts ...grpc.CallOption) (*UnReadResp, error)
	GetMessage(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*MsgResp, error)
	UpdateMsgStatus(ctx context.Context, in *UpdateMsgStatusReq, opts ...grpc.CallOption) (*UpdateMsgStatusResp, error)
	AckMsg(ctx context.Context, in *AckReq, opts ...grpc.CallOption) (*AckResp, error)
}

type messageClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageClient(cc grpc.ClientConnInterface) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) CreateNew(ctx context.Context, in *CreateNewReq, opts ...grpc.CallOption) (*CreateNewResp, error) {
	out := new(CreateNewResp)
	err := c.cc.Invoke(ctx, Message_CreateNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) GetHistory(ctx context.Context, in *HistoryReq, opts ...grpc.CallOption) (*HistoryResp, error) {
	out := new(HistoryResp)
	err := c.cc.Invoke(ctx, Message_GetHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) GetGroupHistory(ctx context.Context, in *GroupHistoryReq, opts ...grpc.CallOption) (*GroupHistoryResp, error) {
	out := new(GroupHistoryResp)
	err := c.cc.Invoke(ctx, Message_GetGroupHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) GetUnRead(ctx context.Context, in *UnReadReq, opts ...grpc.CallOption) (*UnReadResp, error) {
	out := new(UnReadResp)
	err := c.cc.Invoke(ctx, Message_GetUnRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) GetMessage(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*MsgResp, error) {
	out := new(MsgResp)
	err := c.cc.Invoke(ctx, Message_GetMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UpdateMsgStatus(ctx context.Context, in *UpdateMsgStatusReq, opts ...grpc.CallOption) (*UpdateMsgStatusResp, error) {
	out := new(UpdateMsgStatusResp)
	err := c.cc.Invoke(ctx, Message_UpdateMsgStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) AckMsg(ctx context.Context, in *AckReq, opts ...grpc.CallOption) (*AckResp, error) {
	out := new(AckResp)
	err := c.cc.Invoke(ctx, Message_AckMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServer is the server API for Message service.
// All implementations must embed UnimplementedMessageServer
// for forward compatibility
type MessageServer interface {
	CreateNew(context.Context, *CreateNewReq) (*CreateNewResp, error)
	GetHistory(context.Context, *HistoryReq) (*HistoryResp, error)
	GetGroupHistory(context.Context, *GroupHistoryReq) (*GroupHistoryResp, error)
	GetUnRead(context.Context, *UnReadReq) (*UnReadResp, error)
	GetMessage(context.Context, *MsgReq) (*MsgResp, error)
	UpdateMsgStatus(context.Context, *UpdateMsgStatusReq) (*UpdateMsgStatusResp, error)
	AckMsg(context.Context, *AckReq) (*AckResp, error)
	mustEmbedUnimplementedMessageServer()
}

// UnimplementedMessageServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServer struct {
}

func (UnimplementedMessageServer) CreateNew(context.Context, *CreateNewReq) (*CreateNewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNew not implemented")
}
func (UnimplementedMessageServer) GetHistory(context.Context, *HistoryReq) (*HistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedMessageServer) GetGroupHistory(context.Context, *GroupHistoryReq) (*GroupHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupHistory not implemented")
}
func (UnimplementedMessageServer) GetUnRead(context.Context, *UnReadReq) (*UnReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnRead not implemented")
}
func (UnimplementedMessageServer) GetMessage(context.Context, *MsgReq) (*MsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedMessageServer) UpdateMsgStatus(context.Context, *UpdateMsgStatusReq) (*UpdateMsgStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMsgStatus not implemented")
}
func (UnimplementedMessageServer) AckMsg(context.Context, *AckReq) (*AckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckMsg not implemented")
}
func (UnimplementedMessageServer) mustEmbedUnimplementedMessageServer() {}

// UnsafeMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServer will
// result in compilation errors.
type UnsafeMessageServer interface {
	mustEmbedUnimplementedMessageServer()
}

func RegisterMessageServer(s grpc.ServiceRegistrar, srv MessageServer) {
	s.RegisterService(&Message_ServiceDesc, srv)
}

func _Message_CreateNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).CreateNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_CreateNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).CreateNew(ctx, req.(*CreateNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_GetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).GetHistory(ctx, req.(*HistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_GetGroupHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).GetGroupHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_GetGroupHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).GetGroupHistory(ctx, req.(*GroupHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_GetUnRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).GetUnRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_GetUnRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).GetUnRead(ctx, req.(*UnReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).GetMessage(ctx, req.(*MsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UpdateMsgStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMsgStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UpdateMsgStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_UpdateMsgStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UpdateMsgStatus(ctx, req.(*UpdateMsgStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_AckMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).AckMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_AckMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).AckMsg(ctx, req.(*AckReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Message_ServiceDesc is the grpc.ServiceDesc for Message service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Message_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNew",
			Handler:    _Message_CreateNew_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _Message_GetHistory_Handler,
		},
		{
			MethodName: "GetGroupHistory",
			Handler:    _Message_GetGroupHistory_Handler,
		},
		{
			MethodName: "GetUnRead",
			Handler:    _Message_GetUnRead_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _Message_GetMessage_Handler,
		},
		{
			MethodName: "UpdateMsgStatus",
			Handler:    _Message_UpdateMsgStatus_Handler,
		},
		{
			MethodName: "AckMsg",
			Handler:    _Message_AckMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
