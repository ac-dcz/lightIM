// Code generated by goctl. DO NOT EDIT.
// Source: message.proto

package server

import (
	"context"

	"lightIM/rpc/message/internal/logic"
	"lightIM/rpc/message/internal/svc"
	"lightIM/rpc/message/types"
)

type MessageServer struct {
	svcCtx *svc.ServiceContext
	types.UnimplementedMessageServer
}

func NewMessageServer(svcCtx *svc.ServiceContext) *MessageServer {
	return &MessageServer{
		svcCtx: svcCtx,
	}
}

func (s *MessageServer) CreateNew(ctx context.Context, in *types.CreateNewReq) (*types.CreateNewResp, error) {
	l := logic.NewCreateNewLogic(ctx, s.svcCtx)
	return l.CreateNew(in)
}

func (s *MessageServer) GetHistory(ctx context.Context, in *types.HistoryReq) (*types.HistoryResp, error) {
	l := logic.NewGetHistoryLogic(ctx, s.svcCtx)
	return l.GetHistory(in)
}

func (s *MessageServer) GetGroupHistory(ctx context.Context, in *types.GroupHistoryReq) (*types.GroupHistoryResp, error) {
	l := logic.NewGetGroupHistoryLogic(ctx, s.svcCtx)
	return l.GetGroupHistory(in)
}

func (s *MessageServer) GetUnRead(ctx context.Context, in *types.UnReadReq) (*types.UnReadResp, error) {
	l := logic.NewGetUnReadLogic(ctx, s.svcCtx)
	return l.GetUnRead(in)
}

func (s *MessageServer) GetMessage(ctx context.Context, in *types.MsgReq) (*types.MsgResp, error) {
	l := logic.NewGetMessageLogic(ctx, s.svcCtx)
	return l.GetMessage(in)
}

func (s *MessageServer) UpdateMsgStatus(ctx context.Context, in *types.UpdateMsgStatusReq) (*types.UpdateMsgStatusResp, error) {
	l := logic.NewUpdateMsgStatusLogic(ctx, s.svcCtx)
	return l.UpdateMsgStatus(in)
}

func (s *MessageServer) AckMsg(ctx context.Context, in *types.AckReq) (*types.AckResp, error) {
	l := logic.NewAckMsgLogic(ctx, s.svcCtx)
	return l.AckMsg(in)
}
