// Code generated by goctl. DO NOT EDIT.
// Source: message.proto

package message

import (
	"context"

	"lightIM/rpc/message/types"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Base                = types.Base
	CreateNewReq        = types.CreateNewReq
	CreateNewResp       = types.CreateNewResp
	GroupHistoryReq     = types.GroupHistoryReq
	GroupHistoryResp    = types.GroupHistoryResp
	HistoryReq          = types.HistoryReq
	HistoryResp         = types.HistoryResp
	MsgEntry            = types.MsgEntry
	MsgReq              = types.MsgReq
	MsgResp             = types.MsgResp
	UnReadReq           = types.UnReadReq
	UnReadResp          = types.UnReadResp
	UpdateMsgStatusReq  = types.UpdateMsgStatusReq
	UpdateMsgStatusResp = types.UpdateMsgStatusResp

	Message interface {
		CreateNew(ctx context.Context, in *CreateNewReq, opts ...grpc.CallOption) (*CreateNewResp, error)
		GetHistory(ctx context.Context, in *HistoryReq, opts ...grpc.CallOption) (*HistoryResp, error)
		GetGroupHistory(ctx context.Context, in *GroupHistoryReq, opts ...grpc.CallOption) (*GroupHistoryResp, error)
		GetUnRead(ctx context.Context, in *UnReadReq, opts ...grpc.CallOption) (*UnReadResp, error)
		GetMessage(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*MsgResp, error)
		UpdateMsgStatus(ctx context.Context, in *UpdateMsgStatusReq, opts ...grpc.CallOption) (*UpdateMsgStatusResp, error)
	}

	defaultMessage struct {
		cli zrpc.Client
	}
)

func NewMessage(cli zrpc.Client) Message {
	return &defaultMessage{
		cli: cli,
	}
}

func (m *defaultMessage) CreateNew(ctx context.Context, in *CreateNewReq, opts ...grpc.CallOption) (*CreateNewResp, error) {
	client := types.NewMessageClient(m.cli.Conn())
	return client.CreateNew(ctx, in, opts...)
}

func (m *defaultMessage) GetHistory(ctx context.Context, in *HistoryReq, opts ...grpc.CallOption) (*HistoryResp, error) {
	client := types.NewMessageClient(m.cli.Conn())
	return client.GetHistory(ctx, in, opts...)
}

func (m *defaultMessage) GetGroupHistory(ctx context.Context, in *GroupHistoryReq, opts ...grpc.CallOption) (*GroupHistoryResp, error) {
	client := types.NewMessageClient(m.cli.Conn())
	return client.GetGroupHistory(ctx, in, opts...)
}

func (m *defaultMessage) GetUnRead(ctx context.Context, in *UnReadReq, opts ...grpc.CallOption) (*UnReadResp, error) {
	client := types.NewMessageClient(m.cli.Conn())
	return client.GetUnRead(ctx, in, opts...)
}

func (m *defaultMessage) GetMessage(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*MsgResp, error) {
	client := types.NewMessageClient(m.cli.Conn())
	return client.GetMessage(ctx, in, opts...)
}

func (m *defaultMessage) UpdateMsgStatus(ctx context.Context, in *UpdateMsgStatusReq, opts ...grpc.CallOption) (*UpdateMsgStatusResp, error) {
	client := types.NewMessageClient(m.cli.Conn())
	return client.UpdateMsgStatus(ctx, in, opts...)
}
