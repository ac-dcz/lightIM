// Code generated by goctl. DO NOT EDIT.

package group

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupFieldNames          = builder.RawFieldNames(&Group{})
	groupRows                = strings.Join(groupFieldNames, ",")
	groupRowsExpectAutoSet   = strings.Join(stringx.Remove(groupFieldNames, "`gid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupRowsWithPlaceHolder = strings.Join(stringx.Remove(groupFieldNames, "`gid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGroupGidPrefix      = "cache:group:gid:"
	cacheGroupGroupNumPrefix = "cache:group:groupNum:"
)

type (
	groupModel interface {
		Insert(ctx context.Context, data *Group) (sql.Result, error)
		FindOne(ctx context.Context, gid int64) (*Group, error)
		FindOneByGroupNum(ctx context.Context, groupNum string) (*Group, error)
		Update(ctx context.Context, data *Group) error
		Delete(ctx context.Context, gid int64) error
	}

	defaultGroupModel struct {
		sqlc.CachedConn
		table string
	}

	Group struct {
		Gid        int64     `db:"gid"`         // group id
		Owner      int64     `db:"owner"`       // 创建者
		GroupNum   string    `db:"group_num"`   // 群号
		GroupName  string    `db:"group_name"`  // 群名
		Desc       string    `db:"desc"`        // 群简介
		MemberCnts uint64    `db:"member_cnts"` // 成员数
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 上次跟新时间
	}
)

func newGroupModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupModel {
	return &defaultGroupModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group`",
	}
}

func (m *defaultGroupModel) Delete(ctx context.Context, gid int64) error {
	data, err := m.FindOne(ctx, gid)
	if err != nil {
		return err
	}

	groupGidKey := fmt.Sprintf("%s%v", cacheGroupGidPrefix, gid)
	groupGroupNumKey := fmt.Sprintf("%s%v", cacheGroupGroupNumPrefix, data.GroupNum)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `gid` = ?", m.table)
		return conn.ExecCtx(ctx, query, gid)
	}, groupGidKey, groupGroupNumKey)
	return err
}

func (m *defaultGroupModel) FindOne(ctx context.Context, gid int64) (*Group, error) {
	groupGidKey := fmt.Sprintf("%s%v", cacheGroupGidPrefix, gid)
	var resp Group
	err := m.QueryRowCtx(ctx, &resp, groupGidKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `gid` = ? limit 1", groupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, gid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupModel) FindOneByGroupNum(ctx context.Context, groupNum string) (*Group, error) {
	groupGroupNumKey := fmt.Sprintf("%s%v", cacheGroupGroupNumPrefix, groupNum)
	var resp Group
	err := m.QueryRowIndexCtx(ctx, &resp, groupGroupNumKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `group_num` = ? limit 1", groupRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, groupNum); err != nil {
			return nil, err
		}
		return resp.Gid, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupModel) Insert(ctx context.Context, data *Group) (sql.Result, error) {
	groupGidKey := fmt.Sprintf("%s%v", cacheGroupGidPrefix, data.Gid)
	groupGroupNumKey := fmt.Sprintf("%s%v", cacheGroupGroupNumPrefix, data.GroupNum)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, groupRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Owner, data.GroupNum, data.GroupName, data.Desc, data.MemberCnts)
	}, groupGidKey, groupGroupNumKey)
	return ret, err
}

func (m *defaultGroupModel) Update(ctx context.Context, newData *Group) error {
	data, err := m.FindOne(ctx, newData.Gid)
	if err != nil {
		return err
	}

	groupGidKey := fmt.Sprintf("%s%v", cacheGroupGidPrefix, data.Gid)
	groupGroupNumKey := fmt.Sprintf("%s%v", cacheGroupGroupNumPrefix, data.GroupNum)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `gid` = ?", m.table, groupRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Owner, newData.GroupNum, newData.GroupName, newData.Desc, newData.MemberCnts, newData.Gid)
	}, groupGidKey, groupGroupNumKey)
	return err
}

func (m *defaultGroupModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGroupGidPrefix, primary)
}

func (m *defaultGroupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `gid` = ? limit 1", groupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupModel) tableName() string {
	return m.table
}
