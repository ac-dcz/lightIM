// Code generated by goctl. DO NOT EDIT.

package relationship

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	relationShipFieldNames          = builder.RawFieldNames(&RelationShip{})
	relationShipRows                = strings.Join(relationShipFieldNames, ",")
	relationShipRowsExpectAutoSet   = strings.Join(stringx.Remove(relationShipFieldNames, "`rid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	relationShipRowsWithPlaceHolder = strings.Join(stringx.Remove(relationShipFieldNames, "`rid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRelationShipRidPrefix      = "cache:relationShip:rid:"
	cacheRelationShipUid1Uid2Prefix = "cache:relationShip:uid1:uid2:"
)

type (
	relationShipModel interface {
		Insert(ctx context.Context, data *RelationShip) (sql.Result, error)
		FindOne(ctx context.Context, rid int64) (*RelationShip, error)
		FindOneByUid1Uid2(ctx context.Context, uid1 int64, uid2 int64) (*RelationShip, error)
		Update(ctx context.Context, data *RelationShip) error
		Delete(ctx context.Context, rid int64) error
	}

	defaultRelationShipModel struct {
		sqlc.CachedConn
		table string
	}

	RelationShip struct {
		Rid        int64     `db:"rid"`         // 关系id
		Uid1       int64     `db:"uid_1"`       // user-1
		Uid2       int64     `db:"uid_2"`       // user-2
		Status     int64     `db:"status"`      // 好友状态(0-normal,1-(1->2 拉黑),2-(1<-2 拉黑))
		CreateTime time.Time `db:"create_time"` // 用户创建时间
		UpdateTime time.Time `db:"update_time"` // 用户更新时间
	}
)

func newRelationShipModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRelationShipModel {
	return &defaultRelationShipModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`relation_ship`",
	}
}

func (m *defaultRelationShipModel) Delete(ctx context.Context, rid int64) error {
	data, err := m.FindOne(ctx, rid)
	if err != nil {
		return err
	}

	relationShipRidKey := fmt.Sprintf("%s%v", cacheRelationShipRidPrefix, rid)
	relationShipUid1Uid2Key := fmt.Sprintf("%s%v:%v", cacheRelationShipUid1Uid2Prefix, data.Uid1, data.Uid2)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `rid` = ?", m.table)
		return conn.ExecCtx(ctx, query, rid)
	}, relationShipRidKey, relationShipUid1Uid2Key)
	return err
}

func (m *defaultRelationShipModel) FindOne(ctx context.Context, rid int64) (*RelationShip, error) {
	relationShipRidKey := fmt.Sprintf("%s%v", cacheRelationShipRidPrefix, rid)
	var resp RelationShip
	err := m.QueryRowCtx(ctx, &resp, relationShipRidKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `rid` = ? limit 1", relationShipRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, rid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRelationShipModel) FindOneByUid1Uid2(ctx context.Context, uid1 int64, uid2 int64) (*RelationShip, error) {
	relationShipUid1Uid2Key := fmt.Sprintf("%s%v:%v", cacheRelationShipUid1Uid2Prefix, uid1, uid2)
	var resp RelationShip
	err := m.QueryRowIndexCtx(ctx, &resp, relationShipUid1Uid2Key, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `uid_1` = ? and `uid_2` = ? limit 1", relationShipRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uid1, uid2); err != nil {
			return nil, err
		}
		return resp.Rid, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRelationShipModel) Insert(ctx context.Context, data *RelationShip) (sql.Result, error) {
	relationShipRidKey := fmt.Sprintf("%s%v", cacheRelationShipRidPrefix, data.Rid)
	relationShipUid1Uid2Key := fmt.Sprintf("%s%v:%v", cacheRelationShipUid1Uid2Prefix, data.Uid1, data.Uid2)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, relationShipRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid1, data.Uid2, data.Status)
	}, relationShipRidKey, relationShipUid1Uid2Key)
	return ret, err
}

func (m *defaultRelationShipModel) Update(ctx context.Context, newData *RelationShip) error {
	data, err := m.FindOne(ctx, newData.Rid)
	if err != nil {
		return err
	}

	relationShipRidKey := fmt.Sprintf("%s%v", cacheRelationShipRidPrefix, data.Rid)
	relationShipUid1Uid2Key := fmt.Sprintf("%s%v:%v", cacheRelationShipUid1Uid2Prefix, data.Uid1, data.Uid2)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `rid` = ?", m.table, relationShipRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Uid1, newData.Uid2, newData.Status, newData.Rid)
	}, relationShipRidKey, relationShipUid1Uid2Key)
	return err
}

func (m *defaultRelationShipModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRelationShipRidPrefix, primary)
}

func (m *defaultRelationShipModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `rid` = ? limit 1", relationShipRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRelationShipModel) tableName() string {
	return m.table
}
