// Code generated by goctl. DO NOT EDIT.

package user

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userInfosFieldNames          = builder.RawFieldNames(&UserInfos{})
	userInfosRows                = strings.Join(userInfosFieldNames, ",")
	userInfosRowsExpectAutoSet   = strings.Join(stringx.Remove(userInfosFieldNames, "`uid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userInfosRowsWithPlaceHolder = strings.Join(stringx.Remove(userInfosFieldNames, "`uid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserInfosUidPrefix = "cache:userInfos:uid:"
	cacheUserInfosTelPrefix = "cache:userInfos:tel:"
)

type (
	userInfosModel interface {
		Insert(ctx context.Context, data *UserInfos) (sql.Result, error)
		FindOne(ctx context.Context, uid int64) (*UserInfos, error)
		FindOneByTel(ctx context.Context, tel string) (*UserInfos, error)
		Update(ctx context.Context, data *UserInfos) error
		Delete(ctx context.Context, uid int64) error
	}

	defaultUserInfosModel struct {
		sqlc.CachedConn
		table string
	}

	UserInfos struct {
		Uid        int64          `db:"uid"`         // 用户id
		Nickname   string         `db:"nickname"`    // 用户昵称
		Gender     sql.NullString `db:"gender"`      // 性别
		Tel        string         `db:"tel"`         // 手机号
		Password   string         `db:"password"`    // 密码
		CreateTime time.Time      `db:"create_time"` // 用户创建时间
		UpdateTime time.Time      `db:"update_time"` // 用户更新时间
		Status     uint64         `db:"status"`      // 用户状态: 0正常/1注销/2禁用
	}
)

func newUserInfosModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserInfosModel {
	return &defaultUserInfosModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_infos`",
	}
}

func (m *defaultUserInfosModel) Delete(ctx context.Context, uid int64) error {
	data, err := m.FindOne(ctx, uid)
	if err != nil {
		return err
	}

	userInfosTelKey := fmt.Sprintf("%s%v", cacheUserInfosTelPrefix, data.Tel)
	userInfosUidKey := fmt.Sprintf("%s%v", cacheUserInfosUidPrefix, uid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `uid` = ?", m.table)
		return conn.ExecCtx(ctx, query, uid)
	}, userInfosTelKey, userInfosUidKey)
	return err
}

func (m *defaultUserInfosModel) FindOne(ctx context.Context, uid int64) (*UserInfos, error) {
	userInfosUidKey := fmt.Sprintf("%s%v", cacheUserInfosUidPrefix, uid)
	var resp UserInfos
	err := m.QueryRowCtx(ctx, &resp, userInfosUidKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `uid` = ? limit 1", userInfosRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, uid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfosModel) FindOneByTel(ctx context.Context, tel string) (*UserInfos, error) {
	userInfosTelKey := fmt.Sprintf("%s%v", cacheUserInfosTelPrefix, tel)
	var resp UserInfos
	err := m.QueryRowIndexCtx(ctx, &resp, userInfosTelKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `tel` = ? limit 1", userInfosRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, tel); err != nil {
			return nil, err
		}
		return resp.Uid, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfosModel) Insert(ctx context.Context, data *UserInfos) (sql.Result, error) {
	userInfosTelKey := fmt.Sprintf("%s%v", cacheUserInfosTelPrefix, data.Tel)
	userInfosUidKey := fmt.Sprintf("%s%v", cacheUserInfosUidPrefix, data.Uid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userInfosRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Nickname, data.Gender, data.Tel, data.Password, data.Status)
	}, userInfosTelKey, userInfosUidKey)
	return ret, err
}

func (m *defaultUserInfosModel) Update(ctx context.Context, newData *UserInfos) error {
	data, err := m.FindOne(ctx, newData.Uid)
	if err != nil {
		return err
	}

	userInfosTelKey := fmt.Sprintf("%s%v", cacheUserInfosTelPrefix, data.Tel)
	userInfosUidKey := fmt.Sprintf("%s%v", cacheUserInfosUidPrefix, data.Uid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `uid` = ?", m.table, userInfosRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Nickname, newData.Gender, newData.Tel, newData.Password, newData.Status, newData.Uid)
	}, userInfosTelKey, userInfosUidKey)
	return err
}

func (m *defaultUserInfosModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserInfosUidPrefix, primary)
}

func (m *defaultUserInfosModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `uid` = ? limit 1", userInfosRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserInfosModel) tableName() string {
	return m.table
}
